#https://networklessons.com/uncategorized/openssl-certification-authority-ca-ubuntu-server/?utm_source=youtube&utm_medium=social&utm_campaign=OpenSSL%20Certification%20Authority%20(CA)%20on%20Ubuntu%20Ser...
#https://www.youtube.com/watch?v=oCl0gzLPPMI&feature=youtu.be

#Our server is now configured correctly.

#OpenSSL Configuration
#OpenSSL uses a configuration file that is easy to read. There are a couple of things that we will change in it:

# vim /usr/lib/ssl/openssl.cnf
#Look for the following section:

#[ CA_default ]

#dir		= ./demoCA
#And change it, so it looks like this:

#[ CA_default ]                                                                                 
                                                                                               
#dir             = /root/ca
#The “/root/ca” folder is where we will store our private keys and certificates.

#You might also want to take a look at the default policy:

#[ policy_match ]
#countryName		= match
#stateOrProvinceName	= match
#organizationName	= match
#organizationalUnitName	= optional
#commonName		= supplied
#emailAddress		= optional
#Some fields like country, state/province, and organization have to match. If you are building your CA for a lab environment like I am then you might want to change some of these values:

#[ policy_match ]
#countryName             = match
#stateOrProvinceName     = optional
#organizationName        = optional
#organizationalUnitName  = optional
#commonName              = supplied
#emailAddress            = optional
#I’ve changed it so that only the country name has to match.

###########################################################################

 # Maunally update the /etc/hosts
 #127.0.1.1       ca.cloudelligent.local ca
 





#Note: Before running the script, do the mentioned above changes first

#!/bin/bash
#OS: Ubuntu-16-18-LTS

apt update -y
apt install -y curl

curl -fsSL https://get.docker.com -o get-docker.sh
sh get-docker.sh

 systemctl start docker
 systemctl enable docker

docker network ls

docker network create --driver=bridge cloudelligent

docker run --name jenkins --network=cloudelligent -d --user=root -v ~/jenkins:/var/jenkins_home -p 8080:8080 --restart unless-stopped jenkins/jenkins:2.176.1


#1 
mkdir -p ~/ssl/certs

#2 
mkdir -p ~/nginx/conf.d

#3 
docker run -d -p 123:123 --restart unless-stopped cloudwattfr/ntpserver:latest

apt install ntp  -y

ntpq -p

 hostnamectl set-hostname ca
 hostname
 
 # Maunally update the /etc/hosts
 #127.0.1.1       ca.cloudelligent.local ca
 hostname -f
 
mkdir /root/ca
mkdir -p /root/ca/newcerts
mkdir -p /root/ca/certs
mkdir -p /root/ca/crl
mkdir -p /root/ca/private
mkdir -p /root/ca/requests
touch /root/ca/index.txt
echo '1234' > /root/ca/serial
 
 
 
 




#4
#WIP


#5
apt update -y  2> /dev/null 
apt install -y vim 2> /dev/null
yum update -y  2> /dev/null 
yum install -y vim 2> /dev/null

#6
echo '
server {
  listen 80;
  server_name localhost;
  return 301 https://$host$request_uri;
}
server {
  server_name localhost;
  listen 443 ssl;
  ssl_certificate /etc/ssl/certs/cloudelligent.com.crt;
  ssl_certificate_key /etc/ssl/certs/cloudelligent.com.key;
  
  
    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
    ssl_ciphers    TLS-CHACHA20-POLY1305-SHA256:TLS-AES-256-GCM-SHA384:TLS-AES-128-GCM-SHA256:HIGH:!aNULL:!MD5; 
 
  
  
location / {
    proxy_set_header        Host $host:$server_port;
    proxy_set_header        X-Real-IP $remote_addr;
    proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header        X-Forwarded-Proto $scheme;
    proxy_redirect http:// https://;
    proxy_pass              http://jenkins:8080;
    # Required for new HTTP-based CLI
    proxy_http_version 1.1;
    proxy_request_buffering off;
  
       }
}' >  ~/nginx/conf.d/server.conf

#7
docker run --name nginx --network=cloudelligent --restart unless-stopped -v ~/ssl/certs:/etc/ssl/certs -v ~/nginx/conf.d:/etc/nginx/conf.d -p 443:443 -p 80:80 -d nginx




#END
