# Docker Custom Bridge Network is recommended in order to communicate containers with container name.

docker network ls

docker network create --driver=bridge cloudelligent

#####################################################################################################################
https://github.com/jenkinsci/docker/blob/master/README.md
docker run --name jenkins -d -v /home/ubuntu/jenkins:/var/jenkins_home -p 8080:8080 -p 50000:50000 jenkins/jenkins:lts
######################################################################################################################



docker run --name jenkins --network=cloudelligent -d -v /home/ubuntu/jenkins:/var/jenkins_home -p 8080:8080 -p 50000:50000 jenkins/jenkins:lts



# Docker Custom Bridge Network is recommended in order to communicate containers with container name.

docker network ls

docker network create --driver=bridge cloudelligent



#1 mkdir -p /root/ssl/private && mkdir -p /root/ssl/certs

#2 mkdir -p /root/nginx/conf.d

#3 openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /root/ssl/private/nginx-selfsigned.key -out /root/ssl/certs/nginx-selfsigned.crt

#4 openssl dhparam -out /root/ssl/certs/dhparam.pem 2048

#5 cd /root/nginx/conf.d

#6 apt update -y && apt install -y vim

#7 vim jenkins.cloudelligent.conf 

upstream jenkins {
  server jenkins:8080 fail_timeout=0;
}

server {
  listen 80;
  server_name jenkins.domain.tld;
  return 301 https://$host$request_uri;
}


server {
  server_name jenkins.cloudelligent.com;
  listen 443 ssl;
  ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
  ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;
  ssl_dhparam /etc/ssl/certs/dhparam.pem;
location / {
    proxy_set_header        Host $host:$server_port;
    proxy_set_header        X-Real-IP $remote_addr;
    proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header        X-Forwarded-Proto $scheme;
    proxy_redirect http:// https://;
    proxy_pass              http://jenkins;
    # Required for new HTTP-based CLI
    proxy_http_version 1.1;
    proxy_request_buffering off;
    proxy_buffering off; # Required for HTTP-based CLI to work over SSL
    # workaround for https://issues.jenkins-ci.org/browse/JENKINS-45651
    add_header 'X-SSH-Endpoint' 'jenkins.cloudelligent.com:50022' always;
       }
}

# https://wiki.jenkins.io/display/JENKINS/Jenkins+behind+an+NGinX+reverse+proxy

#Note Proxy pass will be the container IP
#Example: docker inspect --format '{{ .NetworkSettings.IPAddress }}' fdeabb276a76

#8 docker run --name nginx --network=cloudelligent -v /root/ssl/private:/etc/ssl/private -v /root/ssl/certs:/etc/ssl/certs -v /root/nginx/conf.d:/etc/nginx/conf.d -p 443:443 -d nginx

#Note:  You can also make an entry in /etc/hosts 

#10.11.5.8 jira.saqlainmushtaq.com

# ping jira.saqlainmushtaq.com

###Configuration Location###

#Note: for Amazon Linux or Centos

#vim /etc/nginx/conf.d/server1.conf

#Note:for Ubuntu 

#vim /etc/sites-available/server1.conf
#ln -s /etc/sites-available/server1.conf /etc/nginx/sites-enabled/server1.conf

###End###


Network settings
--dns=[]           : Set custom dns servers for the container
--network="bridge" : Connect a container to a network
                      'bridge': create a network stack on the default Docker bridge
                      'none': no networking
                      'container:<name|id>': reuse another container's network stack
                      'host': use the Docker host network stack
                      '<network-name>|<network-id>': connect to a user-defined network
--network-alias=[] : Add network-scoped alias for the container
--add-host=""      : Add a line to /etc/hosts (host:IP)
--mac-address=""   : Sets the container's Ethernet device's MAC address
--ip=""            : Sets the container's Ethernet device's IPv4 address
--ip6=""           : Sets the container's Ethernet device's IPv6 address
--link-local-ip=[] : Sets one or more container's Ethernet device's link local IPv4/IPv6 addresses

https://docs.docker.com/engine/reference/run/
