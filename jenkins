#!/bin/bash

curl -fsSL https://get.docker.com -o get-docker.sh
sh get-docker.sh

docker network ls

docker network create --driver=bridge cloudelligent

docker run --name jenkins --network=cloudelligent -d --user=root -v ~/jenkins:/var/jenkins_home -p 8080:8080 --restart unless-stopped jenkins/jenkins:2.176.1


#1 
mkdir -p ~/ssl/certs

#2 
mkdir -p ~/nginx/conf.d

#3 
openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout ~/ssl/certs/nginx-selfsigned.key -out ~/ssl/certs/nginx-selfsigned.crt

#4 
openssl dhparam -out ~/ssl/certs/dhparam.pem 2048

#5 
cd ~/nginx/conf.d

#6 
apt update -y  2> /dev/null 
apt install -y vim 2> /dev/null
yum update -y  2> /dev/null 
yum install -y vim 2> /dev/null

#7
echo '
server {
  listen 80;
  server_name jenkins.cloudelligent.com;
  return 301 https://$host$request_uri;
}


server {
  server_name jenkins.cloudelligent.com;
  listen 443 ssl;
  ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
  ssl_certificate_key /etc/ssl/certs/nginx-selfsigned.key;
  ssl_dhparam /etc/ssl/certs/dhparam.pem;
  
    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
    ssl_ciphers    TLS-CHACHA20-POLY1305-SHA256:TLS-AES-256-GCM-SHA384:TLS-AES-128-GCM-SHA256:HIGH:!aNULL:!MD5; 
 
  
  
location / {
    proxy_set_header        Host $host:$server_port;
    proxy_set_header        X-Real-IP $remote_addr;
    proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header        X-Forwarded-Proto $scheme;
    proxy_redirect http:// https://;
    proxy_pass              http://jenkins:8080;
    # Required for new HTTP-based CLI
    proxy_http_version 1.1;
    proxy_request_buffering off;
  
       }
}' >  ~/nginx/conf.d/server.conf

#8
docker run --name nginx --network=cloudelligent --restart unless-stopped -v ~/ssl/certs:/etc/ssl/certs -v ~/nginx/conf.d:/etc/nginx/conf.d -p 443:443 -p 80:80 -d nginx




#END




















# Docker Custom Bridge Network is recommended in order to communicate containers with container name.

https://hub.docker.com/r/jenkins/jenkins/tags

STABLE Version:2.176.1
Note: In case permissions issue use ---> --user=root

docker network ls

docker network create --driver=bridge cloudelligent

#####################################################################################################################
https://github.com/jenkinsci/docker/blob/master/README.md
docker run --name jenkins -d -v /home/ubuntu/jenkins:/var/jenkins_home -p 8080:8080 -p 50000:50000 --restart unless-stopped jenkins/jenkins:2.176.1
######################################################################################################################

docker run --name jenkins -d --user=root -v /root/jenkins:/var/jenkins_home -p 8080:8080 --restart unless-stopped jenkins/jenkins:2.176.1


#############################################################################################
https://forums.docker.com/t/docker-not-found-in-jenkins-pipeline/31683/14


Building Docker images with Jenkins that runs inside a Docker container


docker run --name jenkins -d --user=root -v /root/jenkins:/var/jenkins_home -p 8080:8080 -v $(which docker):/usr/bin/docker -v /var/run/docker.sock:/var/run/docker.sock --restart always jenkins/jenkins:2.176.1
###############################################################################################

The issue was resolved by ---------> apt-get update -y && apt-get install -y libltdl7 -------------- > on container

https://github.com/moby/moby/issues/37531


# Accessing private repos

# https://superuser.com/questions/1004254/how-can-i-change-the-directory-that-ssh-keygen-outputs-to

mkdir /var/jenkins_home/.ssh

ssh-keygen -t rsa -b 4096 -C "quickbooks2018@gmail.com" -f /var/jenkins_home/.ssh/id_rsa

# anyone who wants to integrate a github or other repos just has to add this public key 
# cat /var/jenkins_home/.ssh/id_rsa.pub

# https://www.youtube.com/watch?v=HTlAssPBKBs

# PUSH IMAGES
https://techoverflow.net/2019/04/01/how-to-fix-docker-push-denied-requested-access-to-the-resource-is-denied/

inside docker container

docker login

####################################################################################################################


docker run --name jenkins --network=cloudelligent -d -v /home/ubuntu/jenkins:/var/jenkins_home --restart unless-stopped -p 80:8080 -p 50000:50000 jenkins/jenkins:lts



# Docker Custom Bridge Network is recommended in order to communicate containers with container name.

docker network ls

docker network create --driver=bridge cloudelligent



#1 mkdir -p ~/ssl/certs

#2 mkdir -p ~/nginx/conf.d

#3 openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout ~/ssl/certs/nginx-selfsigned.key -out ~/ssl/certs/nginx-selfsigned.crt

#4 openssl dhparam -out ~/ssl/certs/dhparam.pem 2048

#5 cd /root/nginx/conf.d

#6 apt update -y && apt install -y vim > /dev/null
   yum update -y && yum install -y vim > /dev/null

#7 vim server.cloudelligent.conf 

upstream jenkins {
  server jenkins:8080 fail_timeout=0;
}

server {
  listen 80;
  server_name jenkins.cloudelligent.com;
  return 301 https://$host$request_uri;
}


server {
  server_name jenkins.cloudelligent.com;
  listen 443 ssl;
  ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
  ssl_certificate_key /etc/ssl/certs/nginx-selfsigned.key;
  ssl_dhparam /etc/ssl/certs/dhparam.pem;
location / {
    proxy_set_header        Host $host:$server_port;
    proxy_set_header        X-Real-IP $remote_addr;
    proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header        X-Forwarded-Proto $scheme;
    proxy_redirect http:// https://;
    proxy_pass              http://jenkins;
    # Required for new HTTP-based CLI
    proxy_http_version 1.1;
    proxy_request_buffering off;
    proxy_buffering off; # Required for HTTP-based CLI to work over SSL
    # workaround for https://issues.jenkins-ci.org/browse/JENKINS-45651
    add_header 'X-SSH-Endpoint' 'jenkins.cloudelligent.com:50022' always;
       }
}

# https://wiki.jenkins.io/display/JENKINS/Jenkins+behind+an+NGinX+reverse+proxy

#Note Proxy pass will be the container IP
#Example: docker inspect --format '{{ .NetworkSettings.IPAddress }}' fdeabb276a76

#8 docker run --name nginx --network=cloudelligent --restart unless-stopped -v /root/ssl/private:/etc/ssl/private -v /root/ssl/certs:/etc/ssl/certs -v /root/nginx/conf.d:/etc/nginx/conf.d -p 443:443 -d nginx

#Note:  You can also make an entry in /etc/hosts 

#10.11.5.8 jira.saqlainmushtaq.com

# ping jira.saqlainmushtaq.com

###Configuration Location###

#Note: for Amazon Linux or Centos

#vim /etc/nginx/conf.d/server1.conf

#Note:for Ubuntu 

#vim /etc/sites-available/server1.conf
#ln -s /etc/sites-available/server1.conf /etc/nginx/sites-enabled/server1.conf

###End###


Network settings
--dns=[]           : Set custom dns servers for the container
--network="bridge" : Connect a container to a network
                      'bridge': create a network stack on the default Docker bridge
                      'none': no networking
                      'container:<name|id>': reuse another container's network stack
                      'host': use the Docker host network stack
                      '<network-name>|<network-id>': connect to a user-defined network
--network-alias=[] : Add network-scoped alias for the container
--add-host=""      : Add a line to /etc/hosts (host:IP)
--mac-address=""   : Sets the container's Ethernet device's MAC address
--ip=""            : Sets the container's Ethernet device's IPv4 address
--ip6=""           : Sets the container's Ethernet device's IPv6 address
--link-local-ip=[] : Sets one or more container's Ethernet device's link local IPv4/IPv6 addresses

https://docs.docker.com/engine/reference/run/




#### Jenkinfile ###

# https://stackoverflow.com/questions/38665282/how-to-set-custom-context-for-docker-build-in-jenkinsfile
# https://stackoverflow.com/questions/42655474/jenkinsfile-pipeline-errors-expected-a-symbol-and-undefined-section

pipeline {
    agent any
   
    stages {
        stage('Build') {
            steps {
                sh  docker.build("quickbooks2018/testing:latest", "-f docker/cartodb/Dockerfile . ")
            }
        }
        stage('Test') {
            steps {
                echo 'Testing..'
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploying....'
            }
        }
    }
}


### Jenkinsfile ###

https://medium.com/@gustavo.guss/jenkins-building-docker-image-and-sending-to-registry-64b84ea45ee9

pipeline {
    environment {
    repo = "quickbooks2018/testing"
    
  }
    agent any
   
    stages {
        stage('Build') {
            steps {
                script {
          docker.build repo + ":$BUILD_NUMBER", "-f docker/cartodb/Dockerfile docker/cartodb"
                            }
               
            }
        }
        stage('Test') {
            steps {
                echo 'Testing..'
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploying....'
            }
        }
    }
}

### Jenkinsfile ###

# https://jenkins.io/doc/pipeline/tour/running-multiple-steps/

pipeline {
    environment {
    repo = "quickbooks2018/testing"
    
  }
    agent any
   
    stages {
        stage('Build via docker-compose') {
            steps {
               
              sh '''
                    echo $PWD
                    whoami
                    ls $PWD
                    docker-compose up -d
                '''
            }
        }
        stage('Test') {
            steps {
                echo 'Testing..'
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploying....'
            }
        }
    }
}


### Stop all containers except ONE ###

https://stackoverflow.com/questions/40744000/remove-all-docker-containers-except-one

docker stop $(docker ps -a | grep -v "jenkins" | awk 'NR>1 {print $1}')

docker rm $(docker ps -a | grep -v "jenkins" | awk 'NR>1 {print $1}')

docker stop $(docker ps -a | grep -v "jenkins" | awk 'NR>1 {print $1}') 2>&1 >/dev/null

docker rm $(docker ps -a | grep -v "jenkins" | awk 'NR>1 {print $1}') 2>&1 >/dev/null


### Jenkinsfile ###

pipeline {
    environment {
    tests = "docker/cartodb/tests"
     bats = "/opt/bats"
      run = "/opt/tests"
    
  }
    agent any
   
    stages {
        stage('Build via docker-compose') {
            steps {
               
              sh '''
                    echo $PWD
                    whoami
                    ls $PWD
                    echo 'Removing all existing running containers except Jenkins'
                    docker stop $(docker ps -a | grep -v "jenkins" | awk 'NR>1 {print $1}') 2>&1 >/dev/null
                    docker rm $(docker ps -a | grep -v "jenkins" | awk 'NR>1 {print $1}') 2>&1 >/dev/null
                    docker-compose up -d
                '''
            }
        }
        stage('Unit Testing cartodb container') {
            steps {
                
                 sh '''
                    echo $PWD
                    whoami
                    ls $PWD
                    echo 'Mentioned below are the available paths to run our bash scripts'
                    echo $PATH
                    echo 'Currently we have two containers running';docker-compose ps
                    echo 'Installing bats'
                    docker exec cartodb  git clone https://github.com/sstephenson/bats.git $bats
                    docker exec cartodb chmod +x $bats/install.sh
                    docker exec cartodb $bats/install.sh /usr/local 
                    docker exec cartodb mkdir /opt/tests
                    echo 'We are now going to copy our test script in the cartodb container at /opt/tests'
                    docker cp $tests/run.sh cartodb:$run
                    docker exec cartodb ls $run
                    docker exec cartodb chmod +x $run/run.sh
                    docker exec cartodb $run/run.sh /usr/local
                    
                    
                '''
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploying....'
            }
        }
    }
}
