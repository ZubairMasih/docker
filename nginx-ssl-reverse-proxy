# Docker Custom Bridge Network is recommended in order to communicate containers with container name.

docker network ls

docker network create --driver=bridge cloudelligent



#1 mkdir -p /root/ssl/private && mkdir -p /root/ssl/certs

#2 mkdir -p /root/nginx/conf.d

#3 openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /root/ssl/private/nginx-selfsigned.key -out /root/ssl/certs/nginx-selfsigned.crt

#4 openssl dhparam -out /root/ssl/certs/dhparam.pem 2048

#5 cd /root/nginx/conf.d

#6 apt update -y && apt install -y vim

#7 vim ssl.conf 

server {
    listen 80;
    server_name jira.saqlainmushtaq.com;
    root /usr/share/nginx/html;
    index index.php index.htm index.html;
    return 301 https://$server_name$request_uri;
}

server {
  server_name jira.saqlainmushtaq.com;
  listen 443 ssl;
  ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
  ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;
  ssl_dhparam /etc/ssl/certs/dhparam.pem;

    location / {
        proxy_pass http://application-container-name:8080;
       }
}


#Note Proxy pass will be the container IP
#Example: docker inspect --format '{{ .NetworkSettings.IPAddress }}' fdeabb276a76

#8 docker run --name nginx --network=cloudelligent -v /root/ssl/private:/etc/ssl/private -v /root/ssl/certs:/etc/ssl/certs -v /root/nginx/conf.d:/etc/nginx/conf.d -p 443:443 -p 80:80 -d nginx

#Note:  You can also make an entry in /etc/hosts 

#10.11.5.8 jira.saqlainmushtaq.com

# ping jira.saqlainmushtaq.com

###Configuration Location###

#Note: for Amazon Linux or Centos

#vim /etc/nginx/conf.d/server1.conf

#Note:for Ubuntu 

#vim /etc/sites-available/server1.conf
#ln -s /etc/sites-available/server1.conf /etc/nginx/sites-enabled/server1.conf

###End###


Network settings
--dns=[]           : Set custom dns servers for the container
--network="bridge" : Connect a container to a network
                      'bridge': create a network stack on the default Docker bridge
                      'none': no networking
                      'container:<name|id>': reuse another container's network stack
                      'host': use the Docker host network stack
                      '<network-name>|<network-id>': connect to a user-defined network
--network-alias=[] : Add network-scoped alias for the container
--add-host=""      : Add a line to /etc/hosts (host:IP)
--mac-address=""   : Sets the container's Ethernet device's MAC address
--ip=""            : Sets the container's Ethernet device's IPv4 address
--ip6=""           : Sets the container's Ethernet device's IPv6 address
--link-local-ip=[] : Sets one or more container's Ethernet device's link local IPv4/IPv6 addresses

https://docs.docker.com/engine/reference/run/
